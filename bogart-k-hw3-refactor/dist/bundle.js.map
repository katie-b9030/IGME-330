{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://bogart-k-hw3-refactor/./src/utils.ts","webpack://bogart-k-hw3-refactor/./src/audio.ts","webpack://bogart-k-hw3-refactor/./src/visualizer.ts","webpack://bogart-k-hw3-refactor/./src/SunflowerSprite.ts","webpack://bogart-k-hw3-refactor/./src/main.ts","webpack://bogart-k-hw3-refactor/./src/loader.ts"],"sourcesContent":["const makeColor = (red:number, green:number, blue:number, alpha:number = 1) => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min:number, max:number) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor,255-floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\nconst getLinearGradient = (ctx:CanvasRenderingContext2D,startX:number,startY:number,endX:number,endY:number,colorStops: any) => {\r\n  let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n  for(let stop of colorStops){\r\n    lg.addColorStop(stop.percent,stop.color);\r\n  }\r\n  return lg;\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element:Element) => {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  // } else if (element.mozRequestFullscreen) {\r\n  //   element.mozRequestFullscreen();\r\n  // } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n  //   element.mozRequestFullScreen();\r\n  // } else if (element.webkitRequestFullscreen) {\r\n  //   element.webkitRequestFullscreen();\r\n  }\r\n  // .. and do nothing if the method is not supported\r\n};\r\n\r\nexport {makeColor, getRandomColor, getLinearGradient, goFullscreen};","// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx:AudioContext;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element:HTMLMediaElement, sourceNode:MediaElementAudioSourceNode, biquadFilter:BiquadFilterNode, lowShelfBiquadFilter:BiquadFilterNode, distortionFilter:WaveShaperNode, analyserNode:AnalyserNode, gainNode:GainNode;\r\nlet highshelf:boolean = false;\r\nlet lowshelf:boolean = false;\r\nlet distortion:boolean = false;\r\nlet distortionAmount:number = 20;\r\n\r\n// 3 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n    gain: .5,\r\n    numSamples: 256\r\n})\r\n\r\n// 4 - create a new array of 8-bit integers (0-255)\r\n// this is a typed array to hold the audio frequency data\r\nlet audioData = new Uint8Array(DEFAULTS.numSamples / 2);\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebaudio = (filePath:string) => {\r\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio();\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode\r\n    biquadFilter = audioCtx.createBiquadFilter();\r\n    biquadFilter.type = \"highshelf\";\r\n    // biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n    // biquadFilter.gain.setValueAtTime(20, audioCtx.currentTime);\r\n    lowShelfBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowShelfBiquadFilter.type = \"highshelf\";\r\n\r\n    distortionFilter = audioCtx.createWaveShaper();\r\n\r\n    // 5 - create an analyser node\r\n    analyserNode = audioCtx.createAnalyser(); // note the UK spelling of \"Analyser\"\r\n\r\n    /*\r\n    // 6\r\n    We will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\n    across the sound spectrum.\r\n\r\n    If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\n    the third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\n    the amplitude of that frequency.\r\n    */\r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    // 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(biquadFilter);\r\n    biquadFilter.connect(lowShelfBiquadFilter);\r\n    lowShelfBiquadFilter.connect(distortionFilter);\r\n    distortionFilter.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\nconst loadSoundFile = (filePath:string) => {\r\n    element.src = filePath;\r\n}\r\n\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n}\r\n\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n}\r\n\r\nconst setVolume = (value:number) => {\r\n    value = Number(value); // make sure that it's a Number rather than a String\r\n    gainNode.gain.value = value;\r\n}\r\n\r\nconst toggleHighshelf = () => {\r\n    highshelf = !highshelf;\r\n    if (highshelf) {\r\n        biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime); // we created the `biquadFilter` (i.e. \"treble\") node last time\r\n        biquadFilter.gain.setValueAtTime(25, audioCtx.currentTime);\r\n    } else {\r\n        biquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\nconst toggleLowshelf = () => {\r\n    lowshelf = !lowshelf;\r\n    if (lowshelf) {\r\n        lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n        lowShelfBiquadFilter.gain.setValueAtTime(15, audioCtx.currentTime);\r\n    } else {\r\n        lowShelfBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\n// from: https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode\r\nconst makeDistortionCurve = (amount = 20) => {\r\n    let n_samples = 256, curve = new Float32Array(n_samples);\r\n    for (let i = 0; i < n_samples; ++i) {\r\n        let x = i * 2 / n_samples - 1;\r\n        curve[i] = (Math.PI + amount) * x / (Math.PI + amount * Math.abs(x));\r\n    }\r\n    return curve;\r\n}\r\n\r\nconst toggleDistortion = () => {\r\n    distortion = !distortion;\r\n    if (distortion) {\r\n        distortionFilter.curve = null; // being paranoid and trying to trigger garbage collection\r\n        distortionFilter.curve = makeDistortionCurve(distortionAmount);\r\n    } else {\r\n        distortionFilter.curve = null;\r\n    }\r\n}\r\n\r\nconst changeDistortion = (amount:number) => {\r\n    distortionAmount = amount;\r\n    if (distortion) {\r\n        distortionFilter.curve = null; // being paranoid and trying to trigger garbage collection\r\n        distortionFilter.curve = makeDistortionCurve(distortionAmount);\r\n    } else {\r\n        distortionFilter.curve = null;\r\n    }\r\n}\r\n\r\nexport { audioCtx, setupWebaudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, toggleHighshelf, toggleLowshelf, toggleDistortion, makeDistortionCurve, changeDistortion, analyserNode, highshelf, lowshelf, distortion, distortionAmount };","/*\r\n\tThe purpose of this file is to take in the analyser node and a <canvas> element: \r\n\t  - the module will create a drawing context that points at the <canvas> \r\n\t  - it will store the reference to the analyser node\r\n\t  - in draw(), it will loop through the data in the analyser node\r\n\t  - and then draw something representative on the canvas\r\n\t  - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\nimport { SunflowerSprite } from './SunflowerSprite';\r\nimport * as utils from './utils';\r\n\r\nlet ctx: CanvasRenderingContext2D, canvasWidth: number, canvasHeight: number, gradient: CanvasGradient, analyserNode: AnalyserNode, audioData: Uint8Array;\r\nlet vizualizeFrequency = true;\r\nlet bigSunflower: SunflowerSprite, mediumSunflower: SunflowerSprite, smallSunflower: SunflowerSprite;\r\n\r\ninterface DrawParams { \r\n\tshowGradient: boolean,\r\n\tshowBars: boolean,\r\n\tshowNoise: boolean, \r\n\tshowInvert: boolean, \r\n\tshowEmboss: boolean\r\n}\r\n\r\nconst setupCanvas = (canvasElement: HTMLCanvasElement, analyserNodeRef: AnalyserNode) => {\r\n\t// create drawing context\r\n\tctx = canvasElement.getContext(\"2d\")!;\r\n\tcanvasWidth = canvasElement.width;\r\n\tcanvasHeight = canvasElement.height;\r\n\t// create a gradient that runs top to bottom\r\n\tgradient = utils.getLinearGradient(ctx, 0, 0, 0, canvasHeight, [{ percent: 0, color: \"hotPink\" }, { percent: .25, color: \"paleVioletRed\" }, { percent: .5, color: \"lightPink\" }, { percent: .75, color: \"orange\" }, { percent: 1, color: \"gold\" }]);\r\n\t// keep a reference to the analyser node\r\n\tanalyserNode = analyserNodeRef;\r\n\t// this is the array where the analyser data will be stored\r\n\taudioData = new Uint8Array(analyserNode.fftSize / 2);\r\n\tbigSunflower = new SunflowerSprite(canvasWidth / 2, canvasHeight / 2, 50, audioData);\r\n\tmediumSunflower = new SunflowerSprite(canvasWidth / 5, canvasHeight * .75, 35, audioData);\r\n\tsmallSunflower = new SunflowerSprite(canvasWidth * .8, canvasHeight / 3, 20, audioData);\r\n}\r\n\r\nconst draw = (params: DrawParams) => {\r\n\t// 1 - populate the audioData array with the frequency data from the analyserNode\r\n\t// notice these arrays are passed \"by reference\" \r\n\tif (vizualizeFrequency) {\r\n\t\tanalyserNode.getByteFrequencyData(audioData);\r\n\t}\r\n\telse {\r\n\t\tanalyserNode.getByteTimeDomainData(audioData);\r\n\t}\r\n\r\n\t// 2 - draw background\r\n\tctx.save();\r\n\tctx.fillStyle = \"black\";\r\n\tctx.globalAlpha = .9;\r\n\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\tctx.restore();\r\n\r\n\t// 3 - draw gradient\r\n\tif (params.showGradient) {\r\n\t\tctx.save();\r\n\t\tctx.fillStyle = gradient;\r\n\t\tctx.globalAlpha = .3;\r\n\t\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\t// 4 - draw bars\r\n\tif (params.showBars) {\r\n\t\tlet barSpacing = 10;\r\n\t\tlet margin = 10;\r\n\t\tlet screenWidthForBars = canvasWidth - (15 * barSpacing) - margin * 2;\r\n\t\tlet barWidth = screenWidthForBars / 21;\r\n\t\tlet barHeight = 20;\r\n\t\t//let topSpacing = 100;\r\n\r\n\t\tctx.save();\r\n\t\tctx.fillStyle = 'rgba(55, 150, 55, 0.50)';\r\n\t\tctx.strokeStyle = 'rgba(0, 0, 0, 0.50)';\r\n\t\tctx.translate(margin, canvasHeight / 2);\r\n\t\t// loop through the data and draw!\r\n\t\tfor (let i = 0; i < audioData.length; i += audioData.length / 16) {\r\n\t\t\tlet yScale = audioData[i] / 25;\r\n\t\t\tif (yScale < 1) {\r\n\t\t\t\tyScale = 1\r\n\t\t\t}\r\n\t\t\t// ctx.fillRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(0, 0);\r\n\t\t\tctx.lineTo(0, barHeight * yScale / 2);\r\n\t\t\tctx.lineTo(barWidth, barHeight * yScale / 2);\r\n\t\t\tctx.lineTo(barWidth, -barHeight * yScale / 2);\r\n\t\t\tctx.lineTo(0, -barHeight * yScale / 2);\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.fill();\r\n\t\t\tctx.translate(margin + barSpacing + barWidth, 0);\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\tbigSunflower.update(audioData);\r\n\tbigSunflower.draw(ctx);\r\n\tmediumSunflower.update(audioData);\r\n\tmediumSunflower.draw(ctx);\r\n\tsmallSunflower.update(audioData);\r\n\tsmallSunflower.draw(ctx);\r\n\r\n\t// 5 - draw circles\r\n\t// if (params.showCircles) {\r\n\t// \tlet maxRadius = canvasHeight / 4;\r\n\t// \tctx.save();\r\n\t// \tctx.globalAlpha = 0.5;\r\n\t// \tfor (let i = 0; i < audioData.length; i++) {\r\n\t// \t\t// red-ish circles\r\n\t// \t\tlet percent = audioData[i] / 255;\r\n\r\n\t// \t\tlet circleRadius = percent * maxRadius;\r\n\t// \t\tctx.beginPath();\r\n\t// \t\tctx.fillStyle = utils.makeColor(255, 111, 111, .34 - percent / 3.0);\r\n\t// \t\tctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius, 0, 2 * Math.PI, false);\r\n\t// \t\tctx.fill();\r\n\t// \t\tctx.closePath();\r\n\r\n\t// \t\t// blue-ishh circles, bigger, more transparent\r\n\t// \t\tctx.beginPath();\r\n\t// \t\tctx.fillStyle = utils.makeColor(0, 0, 255, .10 - percent / 10.0);\r\n\t// \t\tctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius * 1.5, 0, 2 * Math.PI, false);\r\n\t// \t\tctx.fill();\r\n\t// \t\tctx.closePath();\r\n\r\n\t// \t\t// yellow-ish circles, smaller\r\n\t// \t\tctx.save();\r\n\t// \t\tctx.beginPath();\r\n\t// \t\tctx.fillStyle = utils.makeColor(200, 200, 0, .5 - percent / 5.0);\r\n\t// \t\tctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius * .50, 0, 2 * Math.PI, false);\r\n\t// \t\tctx.fill();\r\n\t// \t\tctx.closePath();\r\n\t// \t\tctx.restore();\r\n\t// \t}\r\n\t// \tctx.restore();\r\n\t// }\r\n\r\n\t// 6 - bitmap manipulation\r\n\t// TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \r\n\t// regardless of whether or not we are applying a pixel effect\r\n\t// At some point, refactor this code so that we are looping though the image data only if\r\n\t// it is necessary\r\n\r\n\t// A) grab all of the pixels on the canvas and put them in the `data` array\r\n\t// `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n\t// the variable `data` below is a reference to that array \r\n\tlet imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n\tlet data = imageData.data;\r\n\tlet length = data.length;\r\n\tlet width = imageData.width; // not using here\r\n\t// B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n\tfor (let i = 0; i < length; i += 4) {\r\n\t\t// C) randomly change every 20th pixel to red\r\n\t\tif (params.showNoise && Math.random() < .05) {\r\n\t\t\t// data[i] is the red channel\r\n\t\t\t// data[i+1] is the green channel\r\n\t\t\t// data[i+2] is the blue channel\r\n\t\t\t// data[i+3] is the alpha channel\r\n\t\t\tdata[i] = data[i + 1] = data[i + 2] = 0; // zero out the red and green and blue channels\r\n\t\t\t// data[i] = 255; // make the red channel 100% red\r\n\t\t\tdata[i + 1] = data[i + 2] = 125\r\n\t\t} // end if\r\n\r\n\t\t// invert?\r\n\t\tif (params.showInvert) {\r\n\t\t\tlet red = data[i], green = data[i + 1], blue = data[i + 2];\r\n\t\t\tdata[i] = 255 - red; // set red\r\n\t\t\tdata[i + 1] = 255 - green; // set green\r\n\t\t\tdata[i + 2] = 255 - blue;\t// set blue\r\n\t\t\t// data[i+3] is the alpha, but we're leaving that alone\r\n\t\t}\r\n\t} // end for\r\n\r\n\tif (params.showEmboss) {\r\n\t\t// note we are stepping through *each* sub-pixel\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tif (i % 4 == 3) continue; // skip alpha channel\r\n\t\t\tdata[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\r\n\t\t}\r\n\t}\r\n\t// for (let i = 0; i < audioData.length; i++) {\r\n\t// \tlet bigSunflower = new SunflowerSprite(canvasWidth/2, canvasHeight/2, 50 + audioData[i]);\r\n\t// \tbigSunflower.draw(ctx);\r\n\t// }\r\n\r\n\r\n\r\n\t// D) copy image data back to canvas\r\n\tctx.putImageData(imageData, 0, 0);\r\n} // end draw()\r\n\r\nconst changeVizualizeFrequency = () => {\r\n\tvizualizeFrequency = !vizualizeFrequency;\r\n}\r\n\r\nexport { setupCanvas, draw, changeVizualizeFrequency };","export class SunflowerSprite {\r\n    x: number;\r\n    y:number;\r\n    centerRadius:number;\r\n    audioData:Uint8Array;\r\n    length:number;\r\n    scale:number;\r\n    \r\n        constructor(x:number, y:number, centerRadius:number, audioData:Uint8Array){\r\n            this.x = x;\r\n            this.y = y;\r\n            this.centerRadius = centerRadius;\r\n            this.audioData = audioData;\r\n            this.length = audioData.length;\r\n            this.scale=1;\r\n        }\r\n    \r\n        update(audioData:Uint8Array){\r\n            this.audioData = audioData;\r\n        }\r\n    \r\n        draw(ctx:CanvasRenderingContext2D){\r\n            ctx.save();\r\n            ctx.translate(this.x, this.y);\r\n            let scale = this.audioData[this.length/2]/100;\r\n            if (scale < 1){\r\n                scale = 1;\r\n            }\r\n            ctx.scale(scale, scale);\r\n            // petals\r\n            for (let i = 0; i < 8; i ++){\r\n                drawPetal(ctx, this.centerRadius*2, i*Math.PI/4, \"#FFBF00\");\r\n            }\r\n            for (let i = 0; i < 8; i ++){\r\n                drawPetal(ctx, this.centerRadius*2, Math.PI/8 + i*Math.PI/4, \"#FFCF40\");\r\n            }\r\n            // outer center\r\n            ctx.fillStyle = \"#3D2314\";\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, this.centerRadius, 0, Math.PI*2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n            // inner center\r\n            ctx.fillStyle = \"#23120B\";\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, this.centerRadius*.66, 0, Math.PI*2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n            ctx.restore();\r\n        }\r\n    }\r\n    \r\n    const drawPetal = (ctx:CanvasRenderingContext2D, length:number, rotation:number, color:string) => {\r\n        ctx.save();\r\n        ctx.rotate(rotation);\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, 0);\r\n        ctx.lineTo(-length/8, 0);\r\n        ctx.lineTo(-length/8, -length*.66);\r\n        ctx.lineTo(0, -length);\r\n        ctx.lineTo(length/8, -length*.66);\r\n        ctx.lineTo(length/8, 0);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }","/*\r\n  main.js is primarily responsible for hooking up the UI to the rest of the application \r\n  and setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as visualizer from './visualizer';\r\n\r\nconst drawParams = {\r\n  showGradient: true,\r\n  showBars: true,\r\n  showCircles: true,\r\n  showNoise: false,\r\n  showInvert: false,\r\n  showEmboss: false,\r\n};\r\n\r\n// 1 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n  sound1: \"media/New Adventure Theme.mp3\"\r\n});\r\n\r\nconst init = () => {\r\n  console.log(\"init called\");\r\n  console.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n  audio.setupWebaudio(DEFAULTS.sound1);\r\n  let canvasElement:HTMLCanvasElement = document.querySelector(\"canvas\")!; // hookup <canvas> element\r\n  setupUI(canvasElement);\r\n  visualizer.setupCanvas(canvasElement, audio.analyserNode);\r\n  loadJson();\r\n  loop();\r\n}\r\n\r\nconst setupUI = (canvasElement: HTMLCanvasElement) => {\r\n  // A - hookup fullscreen button\r\n  const fsButton:HTMLButtonElement = document.querySelector(\"#btn-fs\")!;\r\n  const playButton:HTMLButtonElement = document.querySelector(\"#btn-play\")!;\r\n\r\n  // add .onclick event to button\r\n  fsButton.onclick = () => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n  // add .onclick event to buttion\r\n  playButton.onclick = (e:MouseEvent) => {\r\n    let target = e.target as HTMLButtonElement;\r\n\r\n    console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\r\n\r\n    // check if context is in suspended state (autoplay policy)\r\n    if (audio.audioCtx.state == \"suspended\") {\r\n      audio.audioCtx.resume();\r\n    }\r\n    console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n    if (target.dataset.playing == \"no\") {\r\n      // if track is currently paused, play it\r\n      audio.playCurrentSound();\r\n      (target).dataset.playing = \"yes\" // our CSS will set the text to \"Pause\"\r\n    }\r\n    // if track IS playing, pause it\r\n    else {\r\n      audio.pauseCurrentSound();\r\n      (target as HTMLButtonElement).dataset.playing = \"no\"; // our CSS will set the text to \"Play\"\r\n    }\r\n\r\n    let gradientCB:HTMLInputElement = document.querySelector(\"#cb-gradient\")!;\r\n    let barsCB:HTMLInputElement = document.querySelector(\"#cb-bars\")!;\r\n    // let circlesCB = document.querySelector(\"#cb-circles\");\r\n    let noiseCB:HTMLInputElement = document.querySelector(\"#cb-noise\")!;\r\n    let invertCB:HTMLInputElement = document.querySelector(\"#cb-invert\")!;\r\n    let embossCB:HTMLInputElement = document.querySelector(\"#cb-emboss\")!;\r\n\r\n    gradientCB.onchange = () => {\r\n      if (gradientCB.checked) {\r\n        drawParams.showGradient = true;\r\n      }\r\n      else {\r\n        drawParams.showGradient = false;\r\n      }\r\n    }\r\n\r\n    barsCB.onchange = () => {\r\n      if (barsCB.checked) {\r\n        drawParams.showBars = true;\r\n      }\r\n      else {\r\n        drawParams.showBars = false;\r\n      }\r\n    }\r\n\r\n    // circlesCB.onchange = e => {\r\n    //   if (circlesCB.checked) {\r\n    //     drawParams.showCircles = true;\r\n    //   }\r\n    //   else {\r\n    //     drawParams.showCircles = false;\r\n    //   }\r\n    // }\r\n\r\n    noiseCB.onchange = () => {\r\n      if (noiseCB.checked) {\r\n        drawParams.showNoise = true;\r\n      }\r\n      else {\r\n        drawParams.showNoise = false;\r\n      }\r\n    }\r\n\r\n    invertCB.onchange = () => {\r\n      if (invertCB.checked) {\r\n        drawParams.showInvert = true;\r\n      }\r\n      else {\r\n        drawParams.showInvert = false;\r\n      }\r\n    }\r\n\r\n    embossCB.onchange = () => {\r\n      if (embossCB.checked) {\r\n        drawParams.showEmboss = true;\r\n      }\r\n      else {\r\n        drawParams.showEmboss = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  // C - hookup volume slider & label\r\n  let volumeSlider:HTMLInputElement = document.querySelector(\"#slider-volume\")!;\r\n  let volumeLabel:HTMLLabelElement = document.querySelector(\"#label-volume\")!;\r\n\r\n  // add .oninput event to slider\r\n  volumeSlider!.oninput = e => {\r\n    let target = e.target as HTMLButtonElement;\r\n\r\n    // set the gain\r\n    audio.setVolume(Number(target.value));\r\n    // update value of label to match value of slider\r\n    volumeLabel!.innerHTML = Math.round((Number(target.value) / 2 * 100)).toString();\r\n  };\r\n\r\n  // set value of label to match initial value of slider\r\n  volumeSlider!.dispatchEvent(new Event(\"input\"));\r\n\r\n  // D - hookup track <select>\r\n  let trackSelect:HTMLSelectElement = document.querySelector(\"#select-track\")!;\r\n  // add .onchange event to <select>\r\n  trackSelect!.onchange = e => {\r\n    let target = e.target as HTMLButtonElement;\r\n\r\n    audio.loadSoundFile((target as HTMLButtonElement).value);\r\n    // pause the current track if it is playing\r\n    if (playButton.dataset.playing == \"yes\") {\r\n      playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  }\r\n\r\n  let vizualizerSelect:HTMLElement = document.querySelector(\"#select-vizualizer\")!;\r\n  vizualizerSelect!.onchange = () => {\r\n    visualizer.changeVizualizeFrequency();\r\n  }\r\n\r\n  let highshelfCB:HTMLInputElement = document.querySelector('#cb-highshelf')!;\r\n  let lowshelfCB:HTMLInputElement = document.querySelector('#cb-lowshelf')!;\r\n  let distortionSlider:HTMLInputElement = document.querySelector('#slider-distortion')!;\r\n  let distortionCB:HTMLInputElement = document.querySelector(\"#cb-distortion\")!;\r\n\r\n  // I. set the initial state of the high shelf checkbox\r\n  highshelfCB!.checked = audio.highshelf; // `highshelf` is a boolean we will declare in a second\r\n\r\n  // II. change the value of `highshelf` every time the high shelf checkbox changes state\r\n  highshelfCB!.onchange = () => {\r\n    audio.toggleHighshelf(); // turn on or turn off the filter, depending on the value of `highshelf`!\r\n  };\r\n\r\n  // I. set the initial state of the low shelf checkbox\r\n  lowshelfCB!.checked = audio.lowshelf; // `lowshelf` is a boolean we will declare in a second\r\n\r\n  // II. change the value of `lowshelf` every time the low shelf checkbox changes state\r\n  lowshelfCB!.onchange = () => {\r\n    audio.toggleLowshelf(); // turn on or turn off the filter, depending on the value of `lowshelf`!\r\n  };\r\n\r\n  distortionSlider.value = audio.distortionAmount.toString();\r\n  distortionSlider.onchange = e => {\r\n    let target = e.target as HTMLInputElement;\r\n\r\n    audio.changeDistortion(Number(target.value));\r\n  };\r\n  distortionCB.value = audio.distortionAmount.toString();\r\n  distortionCB.onchange = () => {\r\n    audio.toggleDistortion();\r\n  };\r\n\r\n} // end setupUI\r\n\r\nconst loop = () => {\r\n  /* NOTE: This is temporary testing code that we will delete in Part II */\r\n  setTimeout(loop, 1000 / 60);\r\n\r\n  visualizer.draw(drawParams);\r\n}\r\n\r\nconst loadJson = () => {\r\n\r\n  const url:string = \"./data/av-data.json\"\r\n  const xhr:XMLHttpRequest = new XMLHttpRequest();\r\n  xhr.onload = e => {\r\n      let target:EventTarget = e.target!;\r\n      console.log(`In onload - HTTP Status Code = ${(target as XMLHttpRequest).status}`);\r\n      const string = (target as XMLHttpRequest).responseText;\r\n      const json = JSON.parse(string);\r\n      const title = json[\"title\"];\r\n      const trackFiles = json[\"track-files\"];\r\n      const trackNames = json[\"track-names\"];\r\n      const instructions = json[\"instructions\"];\r\n\r\n      const titleHtml = `${title.map((w:string) => `${w}`).join(\"\")}`;\r\n      const instructionsHtml = `<p>${instructions.map((w:string) => `${w}<br>`).join(\"\")}</p>`;\r\n\r\n      document.querySelector(\".title\")!.innerHTML = titleHtml;\r\n      document.querySelector(\".subtitle\")!.innerHTML = instructionsHtml;\r\n\r\n      let trackSelect:HTMLSelectElement = document.querySelector(\"#select-track\")!;\r\n      let trackSelectNat:HTMLSelectElement = trackSelect.querySelector(\"#NAT\")!;\r\n      let trackSelectPt:HTMLSelectElement = trackSelect.querySelector(\"#PT\")!;\r\n      let trackSelectTps:HTMLSelectElement = trackSelect.querySelector(\"#TPS\")!;\r\n      trackSelectNat.value = trackFiles[0];\r\n      trackSelectNat!.innerHTML = trackNames[0];\r\n      trackSelectPt.value = trackFiles[1];\r\n      trackSelectPt.innerHTML = trackNames[1];\r\n      trackSelectTps.value = trackFiles[2];\r\n      trackSelectTps.innerHTML = trackNames[2];\r\n  };\r\n  xhr.onerror = e => {\r\n    let target:EventTarget = e.target!;\r\n\r\n    console.log(`In onerror - HTTP Status Code = ${(target as XMLHttpRequest).status}`);\r\n  }\r\n  xhr.open(\"GET\", url);\r\n  xhr.send();\r\n}\r\n\r\nexport { init };","import * as main from \"./main\";\r\nwindow.onload = ()=>{\r\n\tconsole.log(\"window.onload called\");\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\t\r\n\t// 2 - start up app\r\n\tmain.init();\r\n}"],"names":["audioCtx","sourceNode","biquadFilter","lowShelfBiquadFilter","distortionFilter","analyserNode","gainNode","ctx","canvasWidth","canvasHeight","gradient","bigSunflower","mediumSunflower","smallSunflower","highshelf","lowshelf","distortion","distortionAmount","DEFAULTS","Object","freeze","gain","numSamples","loadSoundFile","Uint8Array","filePath","src","makeDistortionCurve","amount","curve","Float32Array","i","x","Math","PI","abs","y","centerRadius","audioData","this","length","scale","update","draw","save","translate","drawPetal","fillStyle","beginPath","arc","closePath","fill","restore","rotation","color","rotate","moveTo","lineTo","vizualizeFrequency","drawParams","showGradient","showBars","showCircles","showNoise","showInvert","showEmboss","sound1","init","AudioContext","getByte","console","log","random","window","Audio","createMediaElementSource","createBiquadFilter","type","createWaveShaper","createAnalyser","fftSize","createGain","value","connect","destination","canvasElement","document","querySelector","setupUI","analyserNodeRef","getContext","width","height","startX","startY","endX","endY","colorStops","lg","createLinearGradient","percent","addColorStop","SunflowerSprite","loadJson","loop","fsButton","playButton","onclick","element","requestFullscreen","e","target","state","resume","dataset","playing","play","pause","gradientCB","barsCB","noiseCB","invertCB","embossCB","onchange","checked","volumeSlider","volumeLabel","oninput","Number","innerHTML","round","toString","dispatchEvent","Event","MouseEvent","highshelfCB","lowshelfCB","distortionSlider","distortionCB","frequency","setValueAtTime","currentTime","setTimeout","params","getByteFrequencyData","getByteTimeDomainData","globalAlpha","fillRect","barWidth","margin","strokeStyle","yScale","imageData","getImageData","data","red","green","blue","putImageData","xhr","XMLHttpRequest","onload","status","string","responseText","json","JSON","parse","title","trackFiles","trackNames","instructions","titleHtml","map","w","join","instructionsHtml","trackSelect","trackSelectNat","trackSelectPt","trackSelectTps","onerror","open","send"],"sourceRoot":""}